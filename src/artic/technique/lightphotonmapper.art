struct LPhoton {
    in_dir:   Vec3,  // The direction this photon came from
    light:    i32,   // The associated light
    pos:      Vec3,  // The position in world space
    eta:      f32,   // The eta at this point
    radiance: Color, // The carried power
    depth:    i32,   // The depth, with 0 = on the light
    origin:   Vec4,
    partial_mis:    f32,
    guiding_contrib: f32,

    // norm:     Vec3,  // The position in world space
}
static Lphoton_size = 20:i32;

struct LLightCache {
    max_count: i32,
    count:     i32,
    splat:     fn (LPhoton) -> (),
    get  :     fn (i32) -> LPhoton,
    query:     fn (Vec3, f32, fn (LPhoton) -> Color) -> Color,
}

fn @load_lpm_photon(off: i32, buffer: DeviceBuffer) -> LPhoton {
    let idx = 4 /* Header */ + off * Lphoton_size;
    let a1  = buffer.load_vec4(idx + 0);
    let a2  = buffer.load_vec4(idx + 4);
    let a3  = buffer.load_vec4(idx + 8);
    let a4  = buffer.load_vec4(idx + 12);
    let a5  = buffer.load_vec4(idx + 16);

    LPhoton {
        in_dir   = make_vec3(a1.x, a1.y, a1.z),
        light    = bitcast[i32](a1.w),
        pos      = make_vec3(a2.x, a2.y, a2.z),
        eta      = a2.w,
        radiance = make_color(a3.x, a3.y, a3.z, 1),
        depth    = bitcast[i32](a3.w),
        origin = a4,
        partial_mis = a5.x,
        guiding_contrib = a5.y,
        // norm     = make_vec3(a4.x, a4.y, a4.z)
    }
}

fn @store_lpm_photon(photon: LPhoton, off: i32, buffer: DeviceBuffer) -> () {
    let idx = 4 /* Header */ + off * Lphoton_size;
    buffer.store_vec4(idx + 0, make_vec4(photon.in_dir.x, photon.in_dir.y, photon.in_dir.z, bitcast[f32](photon.light)));
    buffer.store_vec4(idx + 4, make_vec4(photon.pos.x, photon.pos.y, photon.pos.z, photon.eta));
    buffer.store_vec4(idx + 8, make_vec4(photon.radiance.r, photon.radiance.g, photon.radiance.b, bitcast[f32](photon.depth)));
    buffer.store_vec4(idx + 12, photon.origin);
    buffer.store_vec4(idx + 16, make_vec4(photon.partial_mis, photon.guiding_contrib, 0, 0));

}


// Simpson kernel
fn @lpm_kernel(r2: f32, d2: f32) {
    let ir2  = safe_div(1, r2);
    let term = 1 - d2 * ir2;
    term * term * 3 * ir2 * flt_inv_pi
}

fn @make_lpm_lightcache(device: Device, photon_count: i32, scene_bbox: BBox) -> LLightCache {
    let light_cache_buffer  = lpm_get_light_cache_buffer(device, photon_count);
    let actual_photon_count = light_cache_buffer.load_i32_host(0);

    let count_buffer  = lpm_get_grid_cache_count_buffer(device);
    let offset_buffer = lpm_get_grid_cache_offset_buffer(device);

    LLightCache {
        max_count = photon_count,
        count     = actual_photon_count,
        splat     = @ |photon| {
            let id = light_cache_buffer.add_atomic_i32(0, 1);
            store_lpm_photon(photon, id, light_cache_buffer)
        },
        get = @ |id| load_lpm_photon(id, light_cache_buffer),
        query = @ |pos, radius, body| -> Color {
            if radius <= flt_eps || actual_photon_count == 0 { return(color_builtins::black) }

            let radius2 = radius * radius;
            let (minx, miny, minz) = grid_scene_pos(vec3_sub(pos, make_vec3(radius, radius, radius)), scene_bbox);
            let (maxx, maxy, maxz) = grid_scene_pos(vec3_add(pos, make_vec3(radius, radius, radius)), scene_bbox);

            let query = @ |ix: i32, iy: i32, iz: i32| -> Color {
                let lin_id = morton_3d(ix, iy, iz);
                let count = count_buffer.load_i32(lin_id);
                if count == 0 { return(color_builtins::black) }

                let offset = offset_buffer.load_i32(lin_id);

                let mut contrib = color_builtins::black;
                for i in range(offset, offset + count) {
                    let photon = load_lpm_photon(i, light_cache_buffer);

                    let dist2 = vec3_len2(vec3_sub(pos, photon.pos));
                    if dist2 <= radius2 {

                        let photon_contrib = body(photon);
                        contrib = color_add(contrib, photon_contrib);

                        //Update the guiding contribution of the photon
                        let new_photon = LPhoton{
                            in_dir   = photon.in_dir,  
                            light    = photon.light,
                            pos      = photon.pos, 
                            eta      = photon.eta,   
                            radiance = photon.radiance,
                            depth    = photon.depth,
                            origin   = photon.origin,
                            partial_mis = photon.partial_mis,
                            guiding_contrib = photon.guiding_contrib + (photon_contrib.r * 0.2126 as f32) + (photon_contrib.g * 0.7152 as f32) + (photon_contrib.b * 0.0722 as f32)
                        };
                        store_lpm_photon(new_photon, i, light_cache_buffer);
                    }
                }

                contrib
            };

            let mut contrib = color_builtins::black;
            for iz in range(minz, maxz + 1) {
                for iy in range(miny, maxy + 1) {
                    for ix in range(minx, maxx + 1) {
                        contrib = color_add(contrib, query(ix, iy, iz));
                    }
                }   
            }

            contrib
        }
    }
}



//Update histogram weights after iteration using lightcache
fn @get_histo_4D_info(device: Device, nlights: i32) = device.request_buffer("__histo_4d_info", 7 * nlights, 0);
fn @get_histo_4D_weights_buffer(device: Device, nlights: i32, bins: i32) = device.request_buffer("__histo_4d_weights", bins * nlights, 0);
fn @get_histo_4D_cdf_buffer(device: Device, nlights: i32, bins: i32) = device.request_buffer("__histo_4d_cdf", (bins + 1) * nlights, 0);
fn @get_histo_4D_pos_marginal_buffer(device: Device, nlights: i32, bins: i32) = device.request_buffer("__histo_4d_pos_marginal", bins * nlights, 0);
fn @get_histo_4D_dir_marginal_buffer(device: Device, nlights: i32, bins: i32) = device.request_buffer("__histo_4d_dir_marginal", bins * nlights, 0);
fn @get_histo_1D_weights_buffer(device: Device, finite_lights_count: i32) = device.request_buffer("__histo_1d_weights", finite_lights_count, 0);


fn @update_lpm_histo_weights(device: Device, photon_count: i32, finite_lights_count: i32, iter: i32) -> (){

    //Get 4d Histogram info for each light
    //for now: assume all 4d histograms of same size
    let histo_4D_info = get_histo_4D_info(device, finite_lights_count);
    let res_u_pos = histo_4D_info.load_i32_host(0);
    let res_v_pos = histo_4D_info.load_i32_host(1);
    let res_u_dir = histo_4D_info.load_i32_host(2);
    let res_v_dir = histo_4D_info.load_i32_host(3);
    let full_res = res_u_pos * res_v_pos * res_u_dir * res_v_dir;
    let pos_res = res_u_pos * res_v_pos;
    let dir_res = res_u_dir * res_v_dir;
    let histo_4D_weights_buffer = get_histo_4D_weights_buffer(device, finite_lights_count, full_res);
    let histo_4D_cdf_buffer = get_histo_4D_cdf_buffer(device, finite_lights_count, full_res);
    let histo_4D_pos_marginal_buffer = get_histo_4D_pos_marginal_buffer(device, finite_lights_count, pos_res);
    let histo_4D_dir_marginal_buffer = get_histo_4D_dir_marginal_buffer(device, finite_lights_count, dir_res);

    //Get 1D Histogram weights
    let histo_1D_weights_buffer = get_histo_1D_weights_buffer(device, finite_lights_count);

    let light_cache_buffer  = lpm_get_light_cache_buffer(device, photon_count);
    let actual_photon_count = light_cache_buffer.load_i32_host(0);

    //clean existing weights after (first) uniform iteration
    if iter == 0 {
        for i in device.parallel_range(0, full_res * finite_lights_count){
            histo_4D_weights_buffer.store_f32(i, 0.0 as f32);
        }
    }

    // Count with positions
    //for i in device.parallel_range(0, actual_photon_count) {
    for i in device.parallel_range(0, actual_photon_count){
        //get photon i
        let photon = load_lpm_photon(i, light_cache_buffer);
        let l = photon.light;
        //update 1D histogram weights (light selector)
        histo_1D_weights_buffer.add_atomic_f32(l, photon.guiding_contrib);

        //update corresponding 4D Histogram weights
        histo_4D_weights_buffer.add_atomic_f32((full_res * l) + res_u_dir * (res_v_dir * (res_u_pos * photon.origin.y as i32 + photon.origin.x as i32) + photon.origin.w as i32) + photon.origin.z as i32, photon.guiding_contrib);
        histo_4D_pos_marginal_buffer.add_atomic_f32((pos_res * l) + photon.origin.x as i32 + res_u_pos * photon.origin.y as i32, photon.guiding_contrib);
        histo_4D_dir_marginal_buffer.add_atomic_f32((dir_res * l) + photon.origin.z as i32 + res_u_dir * photon.origin.w as i32, photon.guiding_contrib);
        //i++;
    }
    device.sync();
    

    for i in device.parallel_range(0, finite_lights_count) {
        //update inverse normalization
        let mut sum = 0.0 as f32;
        let mut j = 0;
        while j < full_res {
            sum += histo_4D_weights_buffer.load_f32((i * full_res) + j);
            j++;
        } 
        let inv_norm = 1.0 as f32 / sum;
        histo_4D_cdf_buffer.store_f32((i * full_res), inv_norm);

        //update cdf
        j = 0;
        sum = 0.0 as f32;
        while j < full_res {
            sum += histo_4D_weights_buffer.load_f32((i * full_res) + j) * inv_norm;
            histo_4D_cdf_buffer.store_f32((i * full_res) + j, sum);
            j++;
        }
    }
    device.sync();

}

////////////////////////////////////
struct LPMRayPayload {
    contrib:         Color,
    depth:           i32,
    eta:             f32,
    radius_or_light: f32, // In the path tracer this becomes the primary radius, in LT the actual light index
    path_type:       i32, // 0 -> delta, 1 -> single diffuse bounce, 2+ -> multiple diffuse bounces
    partial_mis:    f32, // The partial mis computation along the path
    forward_pdf:    f32, // pdf to generate last vertex from the one before it
    reverse_pdf:    f32, // pdf to generate previous vertex from last one
    prev_cos_to_prev: f32, // the cosine between normal of previous vertex and the ray towards the one before it
    prev_dist:       f32, // the distance between the previous vertex and the one before it
    cos_from_prev:   f32, // the consine between previous vertex and the ray towards last one
    last_spec:      i32, // 0 -> false, 1 -> true
    photon_origin:  Vec4 //only used for first pass
}

fn @write_lpmraypayload(payload: RayPayload, pp: LPMRayPayload) -> () {
    payload.set(0, pp.contrib.r);
    payload.set(1, pp.contrib.g);
    payload.set(2, pp.contrib.b);
    payload.set(3, pp.depth as f32);    // FIXME: Weird behavior. We have to use a cast instead of a bitcast, else it does not work...
    payload.set(4, pp.eta);
    payload.set(5, pp.radius_or_light);
    payload.set(6, pp.path_type as f32);
    payload.set(7, pp.partial_mis);
    payload.set(8, pp.forward_pdf);
    payload.set(9, pp.reverse_pdf);
    payload.set(10, pp.prev_cos_to_prev);
    payload.set(11, pp.prev_dist);
    payload.set(12, pp.cos_from_prev);
    payload.set(13, pp.last_spec as f32);
    payload.set(14, pp.photon_origin.x);
    payload.set(15, pp.photon_origin.y);
    payload.set(16, pp.photon_origin.z);
    payload.set(17, pp.photon_origin.w);
}

fn @unwrap_lpmraypayload(payload: RayPayload) = LPMRayPayload {
    contrib         = make_color(payload.get(0), payload.get(1), payload.get(2), 1),
    depth           = payload.get(3) as i32,
    eta             = payload.get(4),
    radius_or_light = payload.get(5),
    path_type       = payload.get(6) as i32,
    partial_mis     = payload.get(7),
    forward_pdf     = payload.get(8),
    reverse_pdf     = payload.get(9),
    prev_cos_to_prev = payload.get(10),
    prev_dist       = payload.get(11),
    cos_from_prev   = payload.get(12),
    last_spec       = payload.get(13) as i32,
    photon_origin   = make_vec4(payload.get(14), payload.get(15), payload.get(16), payload.get(17))
};

fn init_lpm_raypayload(payload: RayPayload) = write_lpmraypayload(payload, LPMRayPayload {
    contrib         = color_builtins::white,
    depth           = 1,
    eta             = 1,
    radius_or_light = 0,
    path_type       = 0,
    partial_mis     = 0,
    forward_pdf     = 1,
    reverse_pdf     = 1,
    prev_cos_to_prev = 0,
    prev_dist       = 0,
    cos_from_prev   = 0,
    last_spec       = 0,
    photon_origin   = make_vec4(0,0,0,0),
});

/////////////////////////////////////
fn @make_lpm_light_emitter(light_selector: LightSelector, iter: i32) -> RayEmitter {
    let offset = 0.001:f32;

    @ |sample, x, y, _width, _height, payload| {
        let mut hash = fnv_init();
        hash = fnv_hash(hash, sample as u32);
        hash = fnv_hash(hash, iter as u32);
        hash = fnv_hash(hash, x as u32);
        hash = fnv_hash(hash, y as u32);
        let mut rnd = hash /*as RndState*/;
        
        let (light, light_pdf) = light_selector.sample(&mut rnd, vec3_expand(0));
        let sample_emission    = light.sample_emission;
        let light_sample       = @sample_emission(rnd);
        
        let ray      = make_ray(light_sample.pos, light_sample.dir, select(light.infinite, 0:f32, offset), flt_max, ray_flag_light);
        let radiance = color_mulf(light_sample.intensity, safe_div(math_builtins::fabs(light_sample.cos), light_pdf));
        
        write_lpmraypayload(payload, LPMRayPayload {
            contrib         = radiance,
            depth           = 1,
            eta             = 1,
            radius_or_light = light.id as f32,
            path_type       = 0, // Not used
            partial_mis     = 0,
            forward_pdf     = 1,
            reverse_pdf     = 1,
            prev_cos_to_prev = 0,
            prev_dist = 0,
            cos_from_prev = 0,
            last_spec = 0,
            photon_origin = make_vec4(0,0,0,0)
        });

        (ray, rnd)
    }
}

/////////////////////////////////////
/// Our LPM implementation only handles direct (LDE) and caustic (LS*DE) paths, as it is limited to a single entry per path (by design)
fn @make_lpm_light_renderer(max_path_len: i32, _aovs: AOVTable, light_cache: LLightCache, radius: f32) -> Technique {
    let offset : f32 = 0.001;

    fn @get_radius(hit: Hit, payload: LPMRayPayload) -> f32 {
        if payload.depth > 1 { 
            payload.radius_or_light
        } else {
            // Only primary hit
            let footprint = hit.distance * 0.017455064; // math_builtins::tan(1 * flt_pi / 180);
            math_builtins::fmin(radius, footprint)
        }
    }
    
    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_lpmraypayload(payload);

        // Only on non emissive and non specular surfaces
        if !mat.is_emissive && !mat.bsdf.is_specular {
            let cos_o = vec3_dot(vec3_neg(ctx.ray.dir), ctx.surf.local.col(2));

            if cos_o > flt_eps {        
                light_cache.splat(LPhoton {
                        in_dir   = vec3_neg(ctx.ray.dir),  
                        light    = pt.radius_or_light as i32, 
                        pos      = ctx.surf.point, 
                        eta      = pt.eta,   
                        radiance = pt.contrib,
                        depth    = pt.depth,
                        origin   = pt.photon_origin,
                        partial_mis = pt.partial_mis / cos_o,
                        guiding_contrib = 0.0 as f32
                    });
            }
        }
        
        Option[Color]::None
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let pt = unwrap_lpmraypayload(payload);

        // Bounce until a diffuse element is found or max path-1 length is reached
        if mat.bsdf.is_specular && pt.depth + 2 /* We need space for camera vertex */ <= max_path_len {
            // Bounce
            let out_dir = vec3_neg(ctx.ray.dir);
            if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, out_dir, true) {

                let contrib = color_mul(pt.contrib, mat_sample.color/* Pdf and cosine are already applied!*/);
                
                ////////////////////////////////////
                //update mis

                let mut par_mis = pt.partial_mis;

                let merge_weight = get_radius(ctx.hit, pt) * get_radius(ctx.hit, pt) * light_cache.count as f32 * flt_pi;
                let cos_to_prev = vec3_dot(out_dir, ctx.surf.local.col(2));

                if(pt.last_spec == 1){
                    par_mis *= pt.cos_from_prev;
                } else {
                    par_mis *= pt.reverse_pdf;

                    if(pt.depth == 2){ //bounce after the light source: add weight to connect to the light source vs other techniques
                        par_mis += (pt.forward_pdf * pt.prev_cos_to_prev) / (pt.prev_dist * pt.prev_dist);
                    } else if (pt.depth > 2){ //afterward: add weight for merging
                        par_mis += merge_weight;
                    }

                    par_mis *= pt.cos_from_prev / mat_sample.pdf;
                }

                par_mis /= cos_to_prev;

                if color_average(contrib) > flt_eps {
                    write_lpmraypayload(payload, LPMRayPayload {
                        contrib         = contrib,
                        depth           = pt.depth + 1,
                        eta             = pt.eta * mat_sample.eta,
                        radius_or_light = pt.radius_or_light,
                        path_type       = pt.path_type, // Not used
                        partial_mis     = par_mis,
                        forward_pdf     = if mat.bsdf.is_specular { 0 } else { mat_sample.pdf },
                        reverse_pdf     = mat.bsdf.pdf(mat_sample.in_dir, ctx.ray.dir),
                        prev_cos_to_prev = cos_to_prev,
                        prev_dist = ctx.hit.distance,
                        cos_from_prev = vec3_dot(mat_sample.in_dir, ctx.surf.local.col(2)),
                        last_spec = if(mat.bsdf.is_specular) {1} else {0},
                        photon_origin = pt.photon_origin
                    });
                    return(make_option(
                        make_ray(ctx.surf.point, mat_sample.in_dir, offset, flt_max, ray_flag_bounce)
                    ))
                }
            }
        }

        Option[Ray]::None
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = TechniqueNoMissFunction,
        on_shadow      = TechniqueNoShadowFunction,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = TechniqueNoShadowMissFunction,
    }
}

static AOV_LPM_DIRECT  = 1;
static AOV_LPM_MERGING = 2;
static AOV_LPM_NEE = 3;


fn @lpm_compute_radius(max_radius: f32, iter: i32) -> f32 {
    let contract_ratio = 0.8:f32;

    let mut radius = max_radius;
    for i in range(0, iter) {
        radius *= (i as f32 + 1 + contract_ratio) / (i + 2) as f32;
    }

    math_builtins::fmax(radius, 1e-5:f32)
}

fn @make_lpm_path_renderer(max_path_len: i32, light_selector: LightSelector, radius: f32, aovs: AOVTable, clamp_value: f32, light_cache: LLightCache) -> Technique {
    let offset : f32 = 0.001;

    let handle_color = if clamp_value > 0 {
        @|c: Color| color_saturate(c, clamp_value)
    } else {
        @|c: Color| c
    };
    
    let aov_di      = @aovs(AOV_LPM_DIRECT);
    let aov_merging = @aovs(AOV_LPM_MERGING);
    let aov_nee = @aovs(AOV_LPM_NEE);

    fn @get_radius(hit: Hit, payload: LPMRayPayload) -> f32 {
        if payload.depth > 1 { 
            payload.radius_or_light
        } else {
            // Only primary hit
            let footprint = hit.distance * 0.017455064; // math_builtins::tan(1 * flt_pi / 180);
            math_builtins::fmin(radius, footprint)
        }
    }

    fn @on_shadow( ctx: ShadingContext
        , rnd: &mut RndState
        , payload: RayPayload
        , _: RayPayload
        , mat: Material
        ) -> ShadowRay {
        // No shadow rays for specular materials
        if mat.bsdf.is_specular || light_selector.count == 0 {
        return(ShadowRay::None)
        }

        let pt = unwrap_lpmraypayload(payload);
        if pt.depth + 1 > max_path_len {
        return(ShadowRay::None)
        }

        let (light, light_select_pdf) = light_selector.sample(rnd, ctx.surf.point);

        let sample_direct = light.sample_direct;
        let light_sample  = @sample_direct(rnd, ctx.surf);

        let pdf_l_s = light_sample.pdf.as_solid(light_sample.cos, light_sample.dist * light_sample.dist) * light_select_pdf; // Pdf to sample the light based on NEE
        if pdf_l_s <= flt_eps {
        return(ShadowRay::None)
        }

        let in_dir  = light_sample.dir; 
        let out_dir = vec3_neg(ctx.ray.dir);
        let dot     = vec3_dot(in_dir, ctx.surf.local.col(2));

        if dot > flt_eps && light_sample.cos > flt_eps {
        let mis = if light.delta { 
            1:f32
        } else {
            /////////////////
            //Compute mis
            let pdf_hit = mat.bsdf.pdf(in_dir, out_dir); // Pdf to sample the light based on bsdf
            let pdf_nee = pdf_l_s;//or: light_sample.pdf.value;
            let tech_on_light = pdf_hit / pdf_nee; // Weight of sampling light based on bsdf vs nee

            let pdf_hit_rev = mat.bsdf.pdf(out_dir, in_dir); //Reverse of pdf_hit
            let partial = (pdf_hit_rev * pt.partial_mis);
            let tech_on_cam = (light_sample.pdf.as_solid(light_sample.cos, light_sample.dist * light_sample.dist) * dot) / (pdf_nee * light_sample.cos) * partial; // Weight of sampling camera vs light nee

            1 / (1 + tech_on_light + tech_on_cam)
        };

        // The intensity is already divided by the pdf, adapt to the (possible) change of domain
        let factor = light_sample.pdf.value/pdf_l_s ;

        let contrib = handle_color(color_mulf(
            color_mul(light_sample.intensity, color_mul(pt.contrib, mat.bsdf.eval(in_dir, out_dir))), mis * factor ));

        if light.infinite {
            return(make_simple_shadow_ray(
                make_ray(ctx.surf.point, in_dir, offset, flt_max, ray_flag_shadow),
                contrib
            ))
        } else {
            return(make_simple_shadow_ray(
                make_ray(ctx.surf.point, vec3_sub(light_sample.pos, ctx.surf.point), offset, 1 - offset, ray_flag_shadow),
                contrib
            ))
        }
        }
        ShadowRay::None
    }

    fn @on_hit( ctx: ShadingContext
              , payload: RayPayload
              , mat: Material
              ) -> Option[Color] {
        let pt = unwrap_lpmraypayload(payload);
        

        // Hits on a light source are only accounted if the path is LS*E
        if pt.path_type == 0 && mat.is_emissive && ctx.surf.is_entering {
            let out_dir = vec3_neg(ctx.ray.dir);
            let dot     = vec3_dot(out_dir, ctx.surf.local.col(2));
            if dot > flt_eps { // Only contribute proper aligned directions

                ////////////////////
                //Compute mis

                let emit    = mat.emission(ctx);
                let mut mis = 1.0 as f32; //Only path tracer renders light sources directly visible
                let merge_weight = get_radius(ctx.hit, pt) * get_radius(ctx.hit, pt) * light_cache.count as f32 * flt_pi;

                if(pt.depth > 1){
                    let mut partial = pt.partial_mis;

                    let pdf_s   = emit.pdf.as_solid(dot, ctx.hit.distance * ctx.hit.distance); // Weight for sampling vertex from light source
                    let mut pdf_l  = 0 as f32;

                    if(pt.last_spec == 0){
                        if(pt.depth > 2) { //don't consider merging direct illumination (done by path tracing)
                            partial -= merge_weight * pt.cos_from_prev / (pt.forward_pdf * dot);
                        }

                        pdf_l =  light_selector.pdf(mat.light, ctx.ray.org) * ctx.hit.distance / (dot * pt.forward_pdf); // Weight for nee
                    }

                    partial = if(partial < 0) 
                    { 0.0 as f32} 
                    else {partial};

                    mis = 1 / (1 + (pdf_s * partial + pdf_l));
                }

                let contrib = handle_color(color_mulf(color_mul(pt.contrib, emit.intensity), mis));

                aov_di.splat(ctx.pixel, contrib);
                return(make_option(handle_color(contrib)))
            }
        }

        // Do final gather
        if pt.depth + 1 <= max_path_len /* Just to be consistent with the pathtracer and omit unnecessary merges */ 
            && !mat.is_emissive && !mat.bsdf.is_specular {
            let actual_radius  = get_radius(ctx.hit, pt);
            let actual_radius2 = actual_radius * actual_radius;

            let out_dir = vec3_neg(ctx.ray.dir);
            let cos_o   = vec3_dot(out_dir, ctx.surf.local.col(2));
            if math_builtins::fabs(cos_o) > flt_eps { // Only contribute proper aligned directions
                let gather_contrib = light_cache.query(ctx.surf.point, actual_radius, 
                    @|photon| {
                        let cos_i = vec3_dot(photon.in_dir, ctx.surf.local.col(2));
                        if pt.depth + photon.depth <= max_path_len && cos_o * cos_i > flt_eps {
                            let dist2    = vec3_len2(vec3_sub(ctx.surf.point, photon.pos));
                            let kernel_f = lpm_kernel(actual_radius2, dist2);

                            let mat_contrib = mat.bsdf.eval(photon.in_dir, out_dir);

                            //////////////////////
                            //Compute mis
                            let mut mis = 0.0 as f32;

                            if((pt.depth != 1 || photon.depth != 1)){ // Don't consider merging for direct illumination (use path tracing instead)
                                let inv_merge_weight = 1 / (get_radius(ctx.hit, pt) * get_radius(ctx.hit, pt) * light_cache.count as f32 * flt_pi);

                                let pdf_hit = mat.bsdf.pdf(photon.in_dir, out_dir);
                                let pdf_hit_rev = mat.bsdf.pdf(out_dir, photon.in_dir);

                                let par_cam = pdf_hit_rev * pt.partial_mis * inv_merge_weight; // Weight of merging from camera
                                let par_light = pdf_hit * photon.partial_mis * inv_merge_weight; //Weight of merging from light source
                                mis = 1 / (1 + par_cam + par_light);
                            }

                            // The cosine term from eval has to be removed as the projection is already handled from the light side
                            color_mulf(color_mulf(color_mul(photon.radiance, mat_contrib), safe_div(kernel_f, math_builtins::fabs(cos_i))), mis)
                        } else {
                            color_builtins::black
                        }
                    } );

                let contrib = color_mul(pt.contrib, color_divf(gather_contrib, light_cache.max_count as f32));
                aov_merging.splat(ctx.pixel, contrib);
                return(make_option(handle_color(contrib)))
            }
        }

        Option[Color]::None
    }

    fn @on_miss( ray: Ray
               , pixel: PixelCoord
               , payload: RayPayload) -> Option[Color] {
        // To prevent double counting, only direct hits (with delta taken into account) are accounted for
        let pt = unwrap_lpmraypayload(payload);
        if pt.path_type == 1 { return(Option[Color]::None) }

        let mut inflights = 0;
        let mut color     = color_builtins::black;

        // Due to the renderer design, this will only iterate through
        // infinite lights, as a miss shader does not contain area lights
        for light_id in safe_unroll(0, light_selector.infinites.count) {
            let light = @light_selector.infinites.get(light_id);
            // Do not include delta lights or finite lights
            if light.infinite && !light.delta {
                inflights += 1;

                let emit = light.emission(make_miss_shading_context(pixel, ray));
                //color    = color_add(color, color_mul(pt.contrib, emit));

                let pdf   = light.pdf_direct(ray, make_invalid_surface_element());
                let pdf_s = pdf.as_solid(1, 1/* We assume infinite lights are always given in solid angle measure */);
                let mis   = 1 / (1 + (1/pt.forward_pdf) * light_selector.pdf(light, ray.org) * pdf_s);
                color     = color_add(color, handle_color(color_mulf(color_mul(pt.contrib, emit), mis)));
            }
        }

        if inflights > 0 {
            aov_di.splat(pixel, color);
            make_option(handle_color(color))
        } else {
            Option[Color]::None
        }
    }

    fn @on_bounce( ctx: ShadingContext
                 , rnd: &mut RndState
                 , payload: RayPayload
                 , mat: Material
                 ) -> Option[Ray] {
        let pt = unwrap_lpmraypayload(payload);

        if pt.depth + 1 > max_path_len {
            return(Option[Ray]::None)
        }

        // Bounce
        let out_dir = vec3_neg(ctx.ray.dir);
        if let Option[BsdfSample]::Some(mat_sample) = mat.bsdf.sample(rnd, out_dir, false) {
            let contrib = color_mul(pt.contrib, mat_sample.color/* Pdf and cosine are already applied!*/);
            let rr_prob = russian_roulette_pbrt(color_mulf(contrib, pt.eta * pt.eta), 0.95);
            if randf(rnd) >= rr_prob {
                return(Option[Ray]::None)
            }

            let new_contrib = color_mulf(contrib, 1 / rr_prob);
            
            ////////////////////////////////////
            //update mis

            let mut par_mis = pt.partial_mis;

            let merge_weight = get_radius(ctx.hit, pt) * get_radius(ctx.hit, pt) * light_cache.count as f32 * flt_pi;
            let cos_to_prev = vec3_dot(out_dir, ctx.surf.local.col(2));

            if(pt.last_spec == 1){
                par_mis *= pt.cos_from_prev;
            } else {
                par_mis *= pt.reverse_pdf;

                if(pt.depth == 2){ //bounce after the camera: add weight to connect to the camera vs other techniques
                    par_mis += (pt.forward_pdf * pt.prev_cos_to_prev) / (pt.prev_dist * pt.prev_dist);
                } else if (pt.depth > 2){ //afterward: add weight for merging
                    par_mis += merge_weight;
                }

                par_mis *= pt.cos_from_prev / mat_sample.pdf;
            }

            par_mis /= cos_to_prev;

            write_lpmraypayload(payload, LPMRayPayload {
                contrib         = new_contrib,
                depth           = pt.depth + 1,
                eta             = pt.eta * mat_sample.eta,
                radius_or_light = pt.radius_or_light,
                path_type       = pt.path_type, // Not used
                partial_mis     = par_mis,
                forward_pdf     = if mat.bsdf.is_specular { 0 } else { mat_sample.pdf },
                reverse_pdf     = mat.bsdf.pdf(mat_sample.in_dir, out_dir),
                prev_cos_to_prev = cos_to_prev,
                prev_dist = ctx.hit.distance,
                cos_from_prev = vec3_dot(mat_sample.in_dir, ctx.surf.local.col(2)),
                last_spec = if(mat.bsdf.is_specular) {1} else {0},
                photon_origin = pt.photon_origin           });
            make_option(
                make_ray(ctx.surf.point, mat_sample.in_dir, offset, flt_max, ray_flag_bounce)
            )
        } else {
            Option[Ray]::None
        }
    }

    fn @on_shadow_miss( _ray: Ray
        , pixel: PixelCoord
        , _shader: MaterialShader
        , _: RayPayload
        , color: Color) -> Option[Color] {
        aov_nee.splat(pixel, color);
        make_option(color)
    }

    Technique {
        on_hit         = on_hit,
        on_miss        = on_miss,
        on_shadow      = on_shadow,
        on_bounce      = on_bounce,
        on_shadow_hit  = TechniqueNoShadowHitFunction,
        on_shadow_miss = on_shadow_miss,
    }
}

///////////////////////////
/// Callbacks

fn @lpm_handle_before_iteration(device: Device, iter: i32, variant: i32, photon_count: i32, scene_bbox: BBox) -> () {
    if variant == 0 {
        lpm_handle_before_iteration_light(device, iter, photon_count)
    } else {
        lpm_handle_before_iteration_camera(device, iter, photon_count, scene_bbox)
    }
}

// We could use a LBVH instead of this simple voxel grid,
// it is more complex to implement however and kept as an exercise for the reader :P
static LPM_GRID_SIZE = 128:i32;
fn @lpm_get_light_cache_buffer(device: Device, photon_count: i32)  = device.request_buffer("__lpm_light_cache",  4 /* Header */ + photon_count * Lphoton_size, 0);
fn @lpm_get_light_cache_buffer2(device: Device, photon_count: i32) = device.request_buffer("__lpm_light_cache2", 4 /* Header */ + photon_count * Lphoton_size, 0);
fn @lpm_get_grid_cache_count_buffer(device: Device)                = device.request_buffer("__lpm_grid_cache_count",   LPM_GRID_SIZE * LPM_GRID_SIZE * LPM_GRID_SIZE, 0);
fn @lpm_get_grid_cache_offset_buffer(device: Device)               = device.request_buffer("__lpm_grid_cache_offset",  LPM_GRID_SIZE * LPM_GRID_SIZE * LPM_GRID_SIZE, 0);
fn @lpm_get_grid_cache_offset_buffer2(device: Device)              = device.request_buffer("__lpm_grid_cache_offset2", LPM_GRID_SIZE * LPM_GRID_SIZE * LPM_GRID_SIZE, 0);

fn @lpm_handle_before_iteration_light(device: Device, _iter: i32, photon_count: i32) -> () {
    let light_cache_buffer = lpm_get_light_cache_buffer(device, photon_count);
    
    // Reset cache (enough to set counter in field 0 to 0)
    light_cache_buffer.store_i32_host(0, 0);
}

// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
fn @lpm_expand_bits(v: u32) -> u32 {
    let mut x = v & 0x000003ff;       // x = ---- ---- ---- ---- ---- --98 7654 3210
    x = (x ^ (x << 16)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
    x = (x ^ (x <<  8)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
    x = (x ^ (x <<  4)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
    x = (x ^ (x <<  2)) & 0x09249249; // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
    x
}


fn @lpm_handle_before_iteration_camera(device: Device, _iter: i32, photon_count: i32, scene_bbox: BBox) -> () {
    let light_cache_buffer = lpm_get_light_cache_buffer(device, photon_count);

    let actual_photon_count = light_cache_buffer.load_i32_host(0);
    if actual_photon_count == 0 { return() }


    let light_cache_buffer2 = lpm_get_light_cache_buffer2(device, actual_photon_count);
    let count_buffer        = lpm_get_grid_cache_count_buffer(device);
    let offset_buffer       = lpm_get_grid_cache_offset_buffer(device);
    let offset_buffer2      = lpm_get_grid_cache_offset_buffer2(device);

    // Reset counter
    for j in device.parallel_range(0, count_buffer.count/4) {
        count_buffer.store_int4(j*4,  0, 0, 0, 0);
        offset_buffer.store_int4(j*4, 0, 0, 0, 0);
    }
    device.sync();

    // Count with positions
    for i in device.parallel_range(0, actual_photon_count) {
        let photon = load_lpm_photon(i, light_cache_buffer);
        let idx    = grid_scene_pos_linear(photon.pos, scene_bbox);
        count_buffer.add_atomic_i32(idx, 1);
    }
    device.sync();

    // Prefix sum (Hillis & Steele)
    let nlog2 = ilog2(count_buffer.count);
    for k in unroll(0, nlog2) {
        let src_buffer = if (k % 2) == 0 { offset_buffer  } else { offset_buffer2 };
        let dst_buffer = if (k % 2) == 0 { offset_buffer2 } else { offset_buffer  };

        let n2 = 0x1 << k;
        for i in device.parallel_range(0, offset_buffer.count-1) {
            let a = if k == 0 { count_buffer.load_i32(i) } else { src_buffer.load_i32(i+1) };

            if i < n2 {
                dst_buffer.store_i32(i+1, a);
            } else {
                let b = if k == 0 { count_buffer.load_i32(i-n2) } else { src_buffer.load_i32(i-n2+1) };
                dst_buffer.store_i32(i+1, a + b);
            }
        }
        device.sync();
    }
    
    // Make sure both offset buffers have the same data
    if ((nlog2-1) % 2) == 0 {
        for i in device.parallel_range(0, offset_buffer2.count/4 ) {
            let (a,b,c,d) = offset_buffer2.load_int4(i * 4);
            offset_buffer.store_int4(i * 4, a, b, c, d);
        }
    } else {
        for i in device.parallel_range(0, offset_buffer.count/4 ) {
            let (a,b,c,d) = offset_buffer.load_int4(i * 4);
            offset_buffer2.store_int4(i * 4, a, b, c, d);
        }
    }
    device.sync();

    // (Unstable) sort
    // After this offset_buffer2 becomes the "end_buffer"
    for i in device.parallel_range(0, actual_photon_count) {
        let photon = load_lpm_photon(i, light_cache_buffer);
        let idx    = grid_scene_pos_linear(photon.pos, scene_bbox);
        let offset = offset_buffer2.add_atomic_i32(idx, 1);
        store_lpm_photon(photon, offset, light_cache_buffer2);
    }
    device.sync();

    // Make sure the light_cache_buffer has the correct data (skipping header)
    // We could skip this by taking track and do some double buffering
    for i in device.parallel_range(0, light_cache_buffer2.count/4 - 1) {
        let (a,b,c,d) = light_cache_buffer2.load_int4(4 /* Header */ + i * 4);
        light_cache_buffer.store_int4(4 /* Header */ + i * 4, a, b, c, d);
    }
    device.sync();
}
